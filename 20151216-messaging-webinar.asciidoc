Messaging With ActiveMQ Artemis
===============================
:author: Jeff Mesnil
:email: <jmesnil@gmail.com>
///////////////////////
	Themes that you can choose includes:
	web-2.0, swiss, neon beamer
///////////////////////
:deckjs_theme: swiss
///////////////////////
	Transitions that you can choose includes:
	fade, horizontal-slide, vertical-slide
///////////////////////
:deckjs_transition: horizontal-slide
///////////////////////
	AsciiDoc use `source-highlight` as default highlighter.

	Styles available for pygment highlighter:
	monokai, manni, perldoc, borland, colorful, default, murphy, vs, trac,
	tango, fruity, autumn, bw, emacs, vim, pastie, friendly, native,

	Uncomment following two lines if you want to highlight your code
	with `Pygments`.
///////////////////////
:pygments:
:pygments_style: default
///////////////////////
	Uncomment following line if you want to scroll inside slides
	with {down,up} arrow keys.
///////////////////////
//:scrollable:
///////////////////////
	Uncomment following line if you want to link css and js file
	from outside instead of embedding them into the output file.
///////////////////////
//:linkcss:
///////////////////////
	Uncomment following line if you want to count each incremental
	bullet as a new slide
///////////////////////
//:count_nested:
:customcss: slides.css

== Messaging With ActiveMQ Artemis

* ActiveMQ Artemis
* +messaging-activemq+ Subsystem
* Compatibility & Migration
* JMS 2.0

== Apache ActiveMQ

* http://activemq.apache.org
* Top level project from Apache Software Foundation
* ActiveMQ
* Apollo
* Artemis

== ActiveMQ Artemis

* http://activemq.apache.org/artemis/
* New Subproject (2015)
* Code donation from Red Hat based on HornetQ
* Non-blocking architecture (Netty / NIO)
* High-performance NIO Journal
* Supports many messaging protocols (Core, AMQP, STOMP, MQTT, OpenWire, HornetQ)
* Provides JMS 2.0 API

== Architecture

----

                            +------------------+
                            |  Artemis Server  |
   +--------------+       +------+             |   +-------+
   |Artemis client|--o )--| core |             |<->|Journal|
   |  core (JMS)  |       +------+             |   +-------+
   +--------------+         |                  |
   +--------------+       +------+             |
   | STOMP client |    )--|STOMP |             |               +--------------+
   +--------------+       +------+             |<-- cluster -->|Artemis Server|
   +--------------+       +------+             |               +--------------+
   | MQTT client  |    )--| MQTT |             |
   +--------------+       +------+             |
                            |                  |
                            +------------------+

         connector --o )-- acceptor
             in-vm/remote/http
                 protocols
----

== Journal

* Persistence store
  - Persistent messages, Bindings
  - Large messages
  - Paging
* Fast (NIO)
* Faster (libAIO on Linux)
* No JDBC (yet)

== High Availability

* Active / Passive
* Shared store
* Replication (UDP, JGroups)
* Colocated Backup
* Scale Down

== +messaging-activemq+ Subsystem

* New subsystem for WildFly 10 / EAP7
* Powered by ActiveMQ Artemis
* Supports only Artemis Core protocol
* legacy +messaging+ subsystem
  - not runnable anymore
  - management model (+admin-only+ mode)

== +messaging-activemq+ Subsystem

[source,java]
----
legacy: /subsystem=messaging/hornetq-server=default
new:    /subsystem=messaging-activemq/server=default
----

== XML Configuration

[source,xml]
----
<subsystem xmlns="urn:jboss:domain:messaging-activemq:1.0">
    <server name="default">
    </server>
</subsystem>
----

== HTTP Connectors & Acceptors

[source,xml]
----
<!-- Acceptor handling HTTP ugprade -->
<http-acceptor name="http-acceptor"
               http-listener="default" /> <1>
<!-- Connector using HTTP Upgrade -->
<http-connector name="http-connector"
                socket-binding="http"
                endpoint="http-acceptor" />
----
<1> the +default+ http-listener is defined in +undertow+ subsystem

== In-vm Connectors & Acceptors

[source,xml]
----
<!-- Acceptor for in-vm communication -->
<in-vm-acceptor name="in-vm"
                server-id="0"/>
<!-- Connector for in-vm communication -->
<in-vm-connector name="in-vm"
                 server-id="0"/>
----

== Remote Connectors & Acceptors

[source,xml]
----
<remote-acceptor name="remote"
                 socket-binding="messaging"/>
<remote-connector name="remote"
                  socket-binding="messaging">
     <param name="batch-delay" value="${batch.delay:50}"/>
</remote-connector>
...
<socket-binding name="messaging" port="61616"/>
----

* Superseded by +http-connector/acceptor+
* Useful to connect to remote Artemis/A-MQ

== Security Settings

[source,xml]
----
<security-setting name="#"> <1>
    <role name="guest"
          send="true"
          consume="true"
          create-non-durable-queue="true"
          delete-non-durable-queue="true"/>
</security-setting>
----
<1> +#+ means _any_ Artemis address

== Cluster resources

* +broadcast-group+ -  Node announcement
* +discovery-group+ - Node discovery
* +cluster-connection+ - Load-balance messages between nodes
* Artemis UDP stack or JGroups

== +broadcast-group+ Resource

[source,xml]
----
<broadcast-group name="bg-group1"
                 connectors="http-connector"
                 jgroups-channel="activemq-cluster"/> <1>
----
<1> Use default JGroups stack (+udp+)

== +discovery-group+ Resource

[source,xml]
----
<discovery-group name="dg-group1"
                 jgroups-channel="activemq-cluster"/> <1>
----
<1> Use default JGroups stack (+udp+)

== +cluster-connection+ Resource

[source,xml]
----
<cluster-connection name="my-cluster"
                    address="jms" <1>
                    connector-name="http-connector" <2>
                    discovery-group="dg-group1" />
----
<1> Any Artemis address _starting_ with +jms+ (i.e. all JMS destinations)
<2> The connector sent to other nodes to connect to this node

== JMS Destinations

[source,xml]
----
<jms-queue name="myQueue"
           entries="java:/jms/queue/myQueue"
           selector="${selector:color='red'}"
           durable="${durable:true}" />
<jms-topic name="myTopic"
           entries="java:/jms/queue/myTopic" />
----

== JMS Connection Factory

[source,xml]
----
<connection-factory name="RemoteConnectionFactory"
                    connectors="http-connector"
                    entries="java:jboss/exported/jms/RemoteConnectionFactory" /> <1>
----
<1> Can be looked up by remote JMS clients

== JMS Pooled Connection Factory

* Use Artemis Resource Adapter
* For MDBs and local JMS clients

[source,xml]
----
<pooled-connection-factory name="activemq-ra"
                           transaction="xa"
                           connectors="in-vm"
                           entries="java:/JmsXA java:jboss/DefaultJMSConnectionFactory"/><1>
----
<1> Provides the default JMS +ConnectionFactory+ for EE7 container

== High-Availability

* `/subsystem=messaging-activemq/server=default/ha-policy=...`
** no HA(!) but scale down
*** +live-only+
** Shared store (access to same file system)
*** +shared-store-master+
*** +shared-store-slave+
*** +shared-store-colocated+
** Replication (no shared state)
*** +replication-master+
*** +replication-slave+
*** +replication-colocated+

== Scaling Down Nodes

* `shared-store-slave`, `replicated-slave`, `live-only` HA policy
* Controls behaviour when Artemis nodes scale down (elastic cloud)
* Transfer messages to other live servers

== Compatibility [1/3]

* Backward - new Artemis client -> old HornetQ server
* Forward  - old HornetQ client -> new Artemis server

----
        "old"                   "new"
AS7, WFLY 8 & 9, EAP6       WFLY 10, EAP7
----

== Backwards Compatibility [2/3]

* New Artemis client can connect to old HornetQ server
* No old server configuration change
* Configure Artemis (+pooled-+)+connection-factory+ with +protocol-manager-factory=org.apache.activemq.artemis.core.protocol.hornetq.client.HornetQClientProtocolManagerFactory+
and a +remote-connector+ pointing to old HornetQ server.
* Use client-side JNDI (Artemis client will not be able to lookup objects in EAP6 JNDI)

== Forwards Compatibility [3/3]

* HornetQ client can connect to Artemis server
* No modification to old client code
* Add +legacy-entries+ attribute to +jms-queue+ and +jms-topic+ resources to bind HornetQ JMS destinations in JNDI
* Add +legacy-connection-factory+ resource to bind HornetQ JMS connection factories in JNDI

== Subsystem Migration [1/3]

. boot a EAP7 server in +admin-only+ mode with EAP6 configuration
. run `/subsystem=messaging:migrate`
. +reload+ in normal mode

== Subsystem Migration [2/3]

* +describe-migration+ operation lists all the operations used to migrate the legacy +messaging+ subsystem
* Contains a list of +migration-warnings+ for every resource or attribute that can not be automatically migrated
* +add-legacy-entries+ operation parameter to maintain legacy JMS resources with their JNDI entries
  - add +legacy-entries+ to +jms-topic+ & +jms-queue+ resources, their regular entries have +-new+ suffix
  - add +legacy-connection-factory+ resource, migrated +connection-factory+ resource has +-new+ suffix for its entries

== Subsystem Migration [3/3]

* Interceptors are not migrated (base class has changed)
* No +legacy-connection-factory+ for +connection-factory+ referencing +invm-connector+
* Migrated +discovery-group+ & +broadcast-group+ must use +socket-binding+ or +jgroups+ (no more +host+, +port+ attributes)
* Migration of HA policy is a best effort depending on the values of +backup+ & +shared-store+ values

== Migration of Data (offline mode)

Migration of all journal data

. Export XML dump from HornetQ (to be documented)
. Import XML dump in Artemis

[source,java]
----
/subsystem=messaging-activemq/server=default:import-journal(file=<path/to/XML/dump>)
----

== Migration of Data (online mode)

* Use a +jms-bridge+
  - source = HornetQ JMS destination(s)
  - target = Artemis JMS destination(s)
* EAP7's +messaging-activemq+ subsystem also provides a +jms-bridge+ resource

[source,java]
----
old: /subsystem=messaging/jms-bridge=XXX
new: /subsystem=messaging-activemq/jms-bridge=YYY
----

== Remote JBoss A-MQ 7 Server

* JBoss A-MQ 7.x (Artemis)
* For STOMP, AMQP, MQTT & OpenWire protocols
* Configured with a +pooled-connection-factory+
* Example after JMS 2 API introduction

== Dive into JMS 2.0

* Simplified API
* JMSContext Injection
* JMS Resource Definitions
* Shared Subscription
* Sending Messages Asynchronously
* MDB Configuration Properties

== JMS 2.0

* JMS 1.1 - released in March 2002
* Java 7
* New Simplified API
* Compatible with JMS 1.1
* Fluent API
* Runtime exceptions

== JMS 2.0 Example

[source,java]
.+SendMessage.java+
----
@JMSDestinationDefinition(name="myQueue", interfaceName="javax.jms.Queue") //<1>

@Resource(mappedName="myQueue")
Queue queue; //<2>

@Inject
private JMSContext context; //<3>

context.createProducer().send(queue, "Hello, JMS 2.0!"); //<4>
----
<1> Create destination resource during deployment
<2> Fetch the queue resource
<3> Main interface of the simplified API
<4> Fluent builder API, runtime exceptions

== JMS 2.0 Example

[source,java]
.+ReceiveMessage.java+
----
@Resource(mappedName="myQueue")
Queue queue;

@Inject
private JMSContext context;

JMSConsumer consumer = context.createConsumer(queue); //<1>
String text = consumer.receiveBody(String.class, 5000); //<2>
// => "Hello, JMS 2.0!"
----
<1> Fluent builder API, runtime exceptions
<2> No cast required to receive a text message

== JMS Resource Definitions [1/3]

[source,java]
.+JMSDefinitions.java+
----
@JMSDestinationDefinition(name="myQueue", //<1>
        interfaceName="javax.jms.Queue",  //<2>
        properties = { "durable=false" }  //<3>
)

@JMSDestinationDefinition(name="myTopic",
        interfaceName="javax.jms.Topic"   //<4>
)
----
<1> Name of the destination
<2> JMS +Queue+
<3> Provider-specific properties
<4> JMS +Topic+

== JMS Resource Definitions [2/3]

[source,java]
.+JMSDefinitions.java+
----
@JMSConnectionFactoryDefinition(name="myFactory", //<1>
        interfaceName = "javax.jms.QueueConnectionFactory", //<2>
        minPoolSize = 5, //<3>
        maxPoolSize = 20,
        clientId = "myclientID", //<4>
        properties = { "initial-connect-attempts=5" } //<5>
)
----
<1> Name of the JMS +ConnectionFactory+
<2> Type of the connection factory
<3> Min/Max size of the connection pool
<4> JMS properties
<5> Provider-specific properties

== JMS Resource Definitions [3/3]

* bound to the deployment lifecycle
* clunky to parameterize
* convenient for fast prototyping
* *for production, define messaging resources in the +messaging-activemq+ subsystem*

== JMSContext

* Encapsulates both a JMS 1.1 +Connection+ and +Session+
* +AutoCloseable+
* Auto-started
* Injectable in Java EE Web or EJB Containers

== JMS Client with JMSContext

[source,java]
.+JMSClient.java+
----
ConnectionFactory cf = (ConnectionFactory)namingContext.lookup("..."); //<1>
Destination destination = (Destination)namingContext.lookup("...");

try (JMSContext context = cf.createContext(userName, password)) { //<2>
  context.createProducer().send(destination, "hello");

  JMSConsumer consumer = context.createConsumer(destination); //<3>
  String response = consumer.receiveBody(String.class, 5000);
}
----
<1> Usual JNDI lookup to get the JMS Connection Factory & Destinations
<2> +try-with-resources+ statement to auto close the context
<3> Context is automatically started when a consumer is created

== JMS Context Injection

[source,java]
.+JMSClient.java+
----
@Inject
// @JMSConnectionFactory("java:comp/DefaultJMSConnectionFactory") //<1>
@JMSConnectionFactory("myFactory") //<2>
@JMSPasswordCredential(userName="${jms.user}",password="${jms.password}") //<3>
@JMSSessionMode(JMSContext.AUTO_ACKNOWLEDGE) //<4>
private JMSContext context;
----
<1> Java EE 7 Default JMS Connection Factory...
<2> ... or you use your own
<3> User credentials (with expressions)
<4> Acknowledgement mode / Transactional behaviour

== Shared Subscription

* Restriction in JMS 1.1
 - No more than *one* consumer for a topic subscription
   - Impossible in Java SE application / multiple JVMs
   - Possible in a Java EE application using a pool of MDB

----
                                    M       +------------+
                              ------------> | consumer 1 |
+----------+  M   +-------+ /               +------------+
| producer | ---> | topic |
+----------+      +-------+ \       M       +------------+
                              ------------> | consumer 2 |
                                            +------------+
----

== Shared Subscription

* Multiple consumers on the same topic subscription

----
                                       M          +------------+
                                ----------------> | consumer 1 |
                              /                   +------------+
                             /                    +------------+
+----------+  M   +-------+ /                ---> | consumer 2 |
| producer | ---> | topic |                /      +------------+
+----------+      +-------+ \             /   M   +------------+
                              << mysub >> -- ---> | consumer 3 |
                                          \       +------------+
                                           \      +------------+
                                             ---> | consumer 4 |
                                                  +------------+
----

* Durable / Non-durable shared consumers

== Shared Subscription

[source,java]
.+SharedSubscription.java+
----
@Resource(mappedName="myTopic")
Topic topic;

@Inject
private JMSContext context;

String subscription = "mysub";

JMSConsumer consumer = context.createSharedConsumer(topic, subscription); //<1>

context.setClientID("...");
JMSConsumer durableConsumer = context.createSharedDurableConsumer(topic, subscription); //<2>
----
<1> Non-durable shared consumer (topic + subscription)
<2> Durable shared consumer (topic + subscription + clientID)

== Sending Messages Asynchronously

[source,java]
.+SendAsynchronously.java+
----
JMSProducer producer = context.createProducer()
    .setAsync(new CompletionListener() { //<1>
        @Override
        public void onCompletion(Message message) { } //<2>

        @Override
        public void onException(Message message, Exception exception) { } //<3>
    });
producer.send(destination, "Hello, Async!"); //<4>
----
<1> Callback for completion
<2> Called when a message was sent successfully
<3> Called when a problem occurred and prevent the message to be sent
<4> Send the message asynchronously

== MDB Configuration Properties

* Java EE6
 - +acknowledgeMode+
 - +messageSelector+
 - +destinationType+
 - +subscriptionDurability+
* Java EE7
 - +destinationLookup+
 - +connectionFactoryLookup+
 - +clientId+
 - +subscriptionName+

== MDB Configuration Properties

[source,java]
.+MDB.java+
----
@MessageDriven(name = "MyMDB", activationConfig = {
    @ActivationConfigProperty(propertyName = "connectionFactoryLookup", //<1>
                             propertyValue = "jms/MyConnectionFactory"),
    @ActivationConfigProperty(propertyName = "destinationType",
                             propertyValue = "javax.jms.Queue"),
    @ActivationConfigProperty(propertyName = "destinationLookup", //<2>
                             propertyValue = "myQueue"),
    @ActivationConfigProperty(propertyName = "acknowledgeMode",
                             propertyValue = "Auto-acknowledge") })
public class MyMDB implements MessageListener {

    public void onMessage(Message message) { ... }
}
----
<1> standard portable property to lookup the connection factory
<2> standard portable property to lookup the destination

== Remote JBoss A-MQ 7 Server [1/5]

----
  +------------------------------+            +------------------+
  |        WildFly/EAP7          |            |   A-MQ7 Server   |
  | +--------------------------+ |           +------+            |
  | |pooled-connection-factory +-------o )---| Core |\ +-------+ |
  | | o o o o o o              | |   :61616  +------+ \|myQueue| |
  | +----+---------------------+ |           +------+ /+-------+ |
  |      |                       |   +-> )---| AMQP |/           |
  | +----+--+                    |   |       +----- +            |
  | | MyMDB |                    |   |        +------------------+
  | +-------+                    |   |
  +------------------------------+   |        +-------------+
                                     +--------| AMQP client |
                                              +-------------+
----

== Remote JBoss A-MQ 7 Server [2/5]

[source,java]
----
/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=remote-artemis:add(host=<server host>, port=61616) //<1>

/subsystem=messaging-activemq/server=default/remote-connector=remote-artemis:add(socket-binding=remote-artemis)

/subsystem=messaging-activemq/server=default/pooled-connection-factory=remote-artemis:add(connectors=[remote-artemis], entries=[java:/jms/remoteCF])
----
<1> Artemis multi-protocol port (including Core protocol)

== Remote JBoss A-MQ 7 Server [3/5]

* MDB Inbound Configuration

[source,java]
----
import org.jboss.ejb3.annotation.ResourceAdapter;

  @ResourceAdapter("remote-artemis")
 @MessageDriven(name = "MyMDB", activationConfig = {
    ...
}) 
public class MyMDB implements MessageListener {
      public void onMessage(Message message) {
       ...
    }
}
----

== Remote JBoss A-MQ 7 Server [4/5]

* Outbound Connection Factory

[source,java]
----
@Inject
 @JMSConnectionFactory("java:/jms/remoteCF")
 private JMSContext context;
----

== Remote JBoss A-MQ 7 Server [5/5]

* disable JNDI lookup (on local EAP7 server)

[source,java]
----
@ResourceAdapter("remote-artemis")
@MessageDriven(name = "MyMDB", activationConfig = {
     @ActivationConfigProperty(propertyName = "useJNDI",         propertyValue = "false"),
     @ActivationConfigProperty(propertyName = "destination",     propertyValue = "myQueue"),
     @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue"), 
    @ActivationConfigProperty(propertyName = "acknowledgeMode", propertyValue = "Auto-acknowledge")
})
public class MyMDB implements MessageListener {
      ...
}
----

== Links

* http://wildfly.org
* http://activemq.apache.org/artemis/
* https://docs.jboss.org/author/display/WFLY10/Messaging+configuration
* http://wildscribe.github.io (WFLY 10 is not published yet)
